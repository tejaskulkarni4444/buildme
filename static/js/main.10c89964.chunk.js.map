{"version":3,"sources":["logo.svg","Components/Navbar.js","Components/ServiceGrid.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","classes","this","props","AppBar","className","navContainer","Toolbar","IconButton","edge","menuButton","color","aria-label","Typography","title","variant","noWrap","search","searchIcon","InputBase","placeholder","root","inputRoot","input","inputInput","inputProps","Component","withStyles","theme","flexGrow","position","top","marginRight","spacing","display","breakpoints","up","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","padding","height","pointerEvents","alignItems","justifyContent","paddingLeft","transition","transitions","create","ServiceGrid","Grid","container","item","xs","fontSize","Home","name","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10c89964.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport InputBase from '@material-ui/core/InputBase'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { withStyles } from '@material-ui/core/styles'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { withRouter } from 'react-router-dom'\n\nfunction mapStateToProps(state) {\n    return {\n\n    };\n}\n\nconst styles = theme => ({\n    root: {\n      flexGrow: 1,\n    },\n    navContainer:{\n      position: 'fixed',\n      top: '0'\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  });\n\nclass Navbar extends Component {\n  render() {\n    const { classes } = this.props\n    return (\n            <AppBar className={classes.navContainer}>\n              <Toolbar>\n              <IconButton\n                  edge=\"start\"\n                  className={classes.menuButton}\n                  color=\"inherit\"\n                  aria-label=\"open drawer\"\n              >\n                <MenuIcon /> {/* TODO <Drawer component to sidebar */}\n              </IconButton>\n              <Typography \n              className={classes.title} \n              variant=\"h6\" noWrap>\n                  Build me\n              </Typography>\n              <div \n              className={classes.search}\n              >\n                  <div \n                  className={classes.searchIcon}\n                  >\n                  <SearchIcon />\n                  </div>\n                  <InputBase\n                  placeholder=\"Searchâ€¦\"\n                  classes={{\n                      root: classes.inputRoot,\n                      input: classes.inputInput,\n                  }}\n                  inputProps={{ 'aria-label': 'search' }}\n                  />\n              </div>\n              </Toolbar>\n          </AppBar>\n    );\n  }\n}\n\nexport default withStyles(styles)(Navbar)","import React, { Component } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport GavelIcon from '@material-ui/icons/Gavel'\nclass ServiceGrid extends Component {\n    render() {\n        return (\n            <div>\n                <Grid container>\n                    <Grid item xs={4} spacing={3}>\n                        <GavelIcon color='white' fontSize='large' aria-label=\"hah\"/>\n                    </Grid>\n                    <Grid item xs={4} spacing={3}>Two</Grid>\n                    <Grid item xs={4} spacing={3}>three</Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={4} spacing={3}>three</Grid>\n                    <Grid item xs={4} spacing={3}>three</Grid>\n                    <Grid item xs={4} spacing={3}>three</Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default ServiceGrid;","import React, { Component } from 'react';\nimport logo from 'logo.svg'\nimport Navbar from './Navbar'\nimport { withStyles } from '@material-ui/core/styles'\nimport ServiceGrid from './ServiceGrid'\n\nconst styles = theme => ({\n    container: {\n        width: '100%'\n    }\n})\n\nclass Home extends Component {\n    render() {\n        const { name, classes } = this.props\n        return (\n            <div className={classes.container}>\n                <Navbar/>\n                <p>{name}</p>\n                <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                >\n                </a>\n                <ServiceGrid />\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(Home)","import React from 'react';\nimport './Components/Home'\nimport './App.css';\nimport Home from './Components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home name='We build and Fix'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}